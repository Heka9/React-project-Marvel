{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","classes","includes","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","newItemLoading","CharList","props","charList","setCharList","_useState3","_useState4","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","window","addEventListener","onScroll","removeEventListener","scrollY","document","documentElement","clientHeight","scrollHeight","initialRequest","onLoadedCharacters","ended","_toConsumableArray","myRefs","useRef","onItemClick","current","forEach","item","classList","remove","add","focus","array","index","styles","CSSTransition","timeout","classNames","ref","div","tabIndex","onCharSelected","onKeyDown","e","key","TransitionGroup","renderItems","disabled","comicsInner","i","CharInfo","charId","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.b8e2d573.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img\r\n         src={img}\r\n         style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n         alt=\"Error\"\r\n      />\r\n   )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n   const { request, clearError, process, setProcess } = useHttp()\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n   const _apiKey = 'apikey=e86591788d711f875b3cf193ec08cc92'\r\n   const _baseOffset = 350\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(_transformCharacter)\r\n   }\r\n\r\n   const getCharacterByName = async (name) => {\r\n      const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n      return res.data.results.map(_transformCharacter)\r\n   }\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n      return _transformCharacter(res.data.results[0])\r\n   }\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(_transformComics)\r\n   }\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n      return _transformComics(res.data.results[0])\r\n   }\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         description: char.description\r\n            ? `${char.description.slice(0, 210)}...`\r\n            : 'There is no description for this character',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items,\r\n      }\r\n   }\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects[0]?.language || 'en-us',\r\n         price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      }\r\n   }\r\n\r\n   return {\r\n      clearError,\r\n      process,\r\n      setProcess,\r\n      getAllCharacters,\r\n      getCharacterByName,\r\n      getCharacter,\r\n      getAllComics,\r\n      getComic,\r\n   }\r\n}\r\n\r\nexport default useMarvelService\r\n","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n   const [process, setProcess] = useState('waiting')\r\n\r\n   const request = useCallback(\r\n      async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n         setProcess('loading')\r\n\r\n         try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            return data\r\n         } catch (error) {\r\n            setProcess('error')\r\n\r\n            throw error\r\n         }\r\n      },\r\n      []\r\n   )\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess('loading')\r\n   }, [])\r\n\r\n   return { request, clearError, process, setProcess }\r\n}\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/errorMessage'\r\nimport Spinner from '../components/spinner/Spinner'\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, Component, data) => {\r\n   switch (process) {\r\n      case 'waiting':\r\n         return <Skeleton />\r\n         break\r\n      case 'loading':\r\n         return <Spinner />\r\n         break\r\n      case 'confirmed':\r\n         return <Component data={data} />\r\n         break\r\n      case 'error':\r\n         return <ErrorMessage />\r\n         break\r\n      default:\r\n         throw new Error('Unexpected process state')\r\n         break\r\n   }\r\n}\r\n\r\nexport default setContent\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react'\n\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent'\n\nimport './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n   const [char, setChar] = useState({})\n\n   const { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n   useEffect(() => {\n      updateChar()\n      const timerId = setInterval(updateChar, 60000)\n      return () => {\n         clearInterval(timerId)\n      }\n   }, [])\n\n   const onCharLoaded = (char) => {\n      setChar(char)\n   }\n\n   const updateChar = () => {\n      clearError()\n      const id = 1011000 + Math.floor(Math.random() * (1011400 - 1011000 + 1))\n      getCharacter(id)\n         .then(onCharLoaded)\n         .then(() => setProcess('confirmed'))\n   }\n\n   return (\n      <div className=\"randomchar\">\n         {setContent(process, View, char)}\n         <div className=\"randomchar__static\">\n            <p className=\"randomchar__title\">\n               Random character for today!\n               <br />\n               Do you want to get to know him better?\n            </p>\n            <p className=\"randomchar__title\">Or choose another one</p>\n            <button className=\"button button__main\" onClick={updateChar}>\n               <div className=\"inner\">try it</div>\n            </button>\n            <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n         </div>\n      </div>\n   )\n}\n\nfunction View({ data }) {\n   const { name, description, thumbnail, homepage, wiki } = data\n\n   let classes\n   if (thumbnail) {\n      classes = thumbnail.includes('image_not_available')\n         ? 'randomchar__img randomchar__img_contain'\n         : 'randomchar__img randomchar__img_cover'\n   }\n\n   return (\n      <div className=\"randomchar__block\">\n         <img src={thumbnail} alt=\"Random character\" className={classes} />\n         <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">{description}</p>\n            <div className=\"randomchar__btns\">\n               <a href={homepage} className=\"button button__main\">\n                  <div className=\"inner\">homepage</div>\n               </a>\n               <a href={wiki} className=\"button button__secondary\">\n                  <div className=\"inner\">Wiki</div>\n               </a>\n            </div>\n         </div>\n      </div>\n   )\n}\nexport default RandomChar\n","import { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport useMarvelService from '../../services/MarvelService'\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/errorMessage'\n\nimport './charList.scss'\n\nconst setContent = (process, Component, newItemLoading) => {\n   switch (process) {\n      case 'waiting':\n         return <Spinner />\n         break\n      case 'loading':\n         return newItemLoading ? <Component /> : <Spinner />\n         break\n      case 'confirmed':\n         return <Component />\n         break\n      case 'error':\n         return <ErrorMessage />\n         break\n      default:\n         throw new Error('Unexpected process state')\n         break\n   }\n}\n\nconst CharList = (props) => {\n   const [charList, setCharList] = useState([])\n   const [newItemLoading, setNewItemLoading] = useState(false)\n   const [offset, setOffset] = useState(350)\n   const [charEnded, setCharEnded] = useState(false)\n\n   const { getAllCharacters, process, setProcess } = useMarvelService()\n\n   const duration = 400\n\n   useEffect(() => {\n      onRequest(offset, true)\n   }, [])\n\n   useEffect(() => {\n      window.addEventListener('scroll', onScroll)\n      return () => window.removeEventListener('scroll', onScroll)\n   })\n\n   const debounce = (fn, ms) => {\n      return function () {\n         setTimeout(() => fn.apply(this, arguments), ms)\n      }\n   }\n\n   const onScroll = () => {\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n         debounce(onRequest(offset), 300)\n      }\n   }\n\n   const onRequest = (offset, initialRequest) => {\n      initialRequest ? setNewItemLoading(false) : setNewItemLoading(true)\n      getAllCharacters(offset)\n         .then(onLoadedCharacters)\n         .then(() => setProcess('confirmed'))\n   }\n\n   const onLoadedCharacters = (data) => {\n      let ended = false\n      if (data.length < 9) {\n         ended = true\n      }\n\n      setCharList((charList) => [...charList, ...data])\n\n      setNewItemLoading(false)\n      setOffset((offset) => offset + 9)\n      setCharEnded(ended)\n   }\n\n   const myRefs = useRef([])\n\n   const onItemClick = (id) => {\n      myRefs.current.forEach((item) => item.classList.remove('char__item_selected'))\n      myRefs.current[id].classList.add('char__item_selected')\n      myRefs.current[id].focus()\n   }\n\n   const renderItems = (array) => {\n      const items = array.map((item, index) => {\n         let styles = { objectFit: 'cover' }\n\n         if (item.thumbnail.includes('image_not_available')) {\n            styles = { objectFit: 'contain' }\n         }\n\n         return (\n            <CSSTransition timeout={duration} classNames=\"char__item\" key={index}>\n               <div\n                  ref={(div) => (myRefs.current[index] = div)}\n                  tabIndex={0}\n                  className=\"char__item\"\n                  onClick={() => {\n                     props.onCharSelected(item.id)\n                     onItemClick(index)\n                  }}\n                  onKeyDown={(e) => {\n                     if (e.key === ' ' || e.key === 'Enter') {\n                        props.onCharSelected(item.id)\n                        onItemClick(index)\n                     }\n                  }}\n               >\n                  <img src={item.thumbnail} alt={item.name} style={styles} />\n                  <div className=\"char__name\">{item.name}</div>\n               </div>\n            </CSSTransition>\n         )\n      })\n      return <TransitionGroup className=\"char__grid\">{items}</TransitionGroup>\n   }\n\n   return (\n      <div className=\"char__list\">\n         {setContent(process, () => renderItems(charList), newItemLoading)}\n         <button\n            disabled={newItemLoading}\n            onClick={() => onRequest(offset)}\n            className=\"button button__main button__long\"\n            style={{ display: charEnded ? 'none' : 'block' }}\n         >\n            <div className=\"inner\">load more</div>\n         </button>\n      </div>\n   )\n}\n\nCharList.propTypes = {\n   onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList\n","import { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent'\n\nimport './charInfo.scss'\n\nconst CharInfo = (props) => {\n   const [char, setChar] = useState(null)\n\n   const { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n   useEffect(() => {\n      updateChar()\n   }, [props.charId])\n\n   const updateChar = () => {\n      const { charId } = props\n      if (!charId) {\n         return\n      }\n\n      clearError()\n      getCharacter(charId)\n         .then(onCharLoaded)\n         .then(() => setProcess('confirmed'))\n   }\n\n   const onCharLoaded = (char) => {\n      setChar(char)\n   }\n\n   return <div className=\"char__info\">{setContent(process, View, char)}</div>\n}\n\nconst View = ({ data }) => {\n   const { name, description, thumbnail, homepage, wiki, comics } = data\n\n   let styles = { objectFit: 'cover' }\n\n   if (thumbnail.includes('image_not_available')) {\n      styles = { objectFit: 'contain' }\n   }\n\n   let comicsInner\n\n   if (comics.length === 0) {\n      comicsInner = 'Comics not found'\n   } else if (comics.length > 10) {\n      const newComics = comics.slice(0, 10)\n      comicsInner = newComics.map((item, i) => {\n         return (\n            <li key={i} className=\"char__comics-item\">\n               {item.name}\n            </li>\n         )\n      })\n   } else {\n      comicsInner = comics.map((item, i) => {\n         return (\n            <li key={i} className=\"char__comics-item\">\n               {item.name}\n            </li>\n         )\n      })\n   }\n\n   return (\n      <>\n         <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={styles} />\n            <div>\n               <div className=\"char__info-name\">{name}</div>\n               <div className=\"char__btns\">\n                  <a href={homepage} className=\"button button__main\">\n                     <div className=\"inner\">homepage</div>\n                  </a>\n                  <a href={wiki} className=\"button button__secondary\">\n                     <div className=\"inner\">Wiki</div>\n                  </a>\n               </div>\n            </div>\n         </div>\n         <div className=\"char__descr\">{description}</div>\n         <div className=\"char__comics\">Comics:</div>\n         <ul className=\"char__comics-list\">{comicsInner}</ul>\n      </>\n   )\n}\n\nCharInfo.propTypes = {\n   charId: PropTypes.number,\n}\n\nexport default CharInfo\n","import { useState } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/errorMessage'\r\n\r\nimport './charSearchForm.scss'\r\n\r\nconst CharSearchForm = () => {\r\n   const [char, setChar] = useState(null)\r\n   const { getCharacterByName, clearError, process, setProcess } = useMarvelService()\r\n\r\n   const onCharLoaded = (char) => {\r\n      setChar(char)\r\n   }\r\n\r\n   const updateChar = (name) => {\r\n      clearError()\r\n\r\n      getCharacterByName(name)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess('confirmed'))\r\n   }\r\n\r\n   const errorMessage =\r\n      process === 'error' ? (\r\n         <div className=\"char__search-critical-error\">\r\n            <ErrorMessage />\r\n         </div>\r\n      ) : null\r\n   const results = !char ? null : char.length > 0 ? (\r\n      <div className=\"char__search-wrapper\">\r\n         <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n         <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n            <div className=\"inner\">To page</div>\r\n         </Link>\r\n      </div>\r\n   ) : (\r\n      <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n   )\r\n\r\n   return (\r\n      <div className=\"char__search-form\">\r\n         <Formik\r\n            initialValues={{\r\n               charName: '',\r\n            }}\r\n            validationSchema={Yup.object({\r\n               charName: Yup.string().required('This field is required'),\r\n            })}\r\n            onSubmit={({ charName }) => {\r\n               updateChar(charName)\r\n            }}\r\n         >\r\n            <Form>\r\n               <label className=\"char__search-label\" htmlFor=\"charName\">\r\n                  Or find a character by name:\r\n               </label>\r\n               <div className=\"char__search-wrapper\">\r\n                  <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n                  <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n                     <div className=\"inner\">find</div>\r\n                  </button>\r\n               </div>\r\n               <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n            </Form>\r\n         </Formik>\r\n         {results}\r\n         {errorMessage}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default CharSearchForm\r\n","import { Component } from 'react/cjs/react.production.min'\r\nimport ErrorMessage from '../errorMessage/errorMessage'\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      error: false,\r\n   }\r\n\r\n   componentDidCatch(error, errorInfo) {\r\n      console.log(error, errorInfo)\r\n\r\n      this.setState({ error: true })\r\n   }\r\n\r\n   render() {\r\n      if (this.state.error) {\r\n         return <ErrorMessage />\r\n      }\r\n\r\n      return this.props.children\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport RandomChar from '../randomChar/RandomChar'\r\nimport CharList from '../charList/CharList'\r\nimport CharInfo from '../charInfo/CharInfo'\r\nimport CharSearchForm from '../CharSearchForm/CharSearchForm'\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\r\n\r\nimport decoration from '../../resources/img/vision.png'\r\n\r\nconst MainPage = () => {\r\n   const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n   const onCharSelected = (id) => {\r\n      setSelectedChar(id)\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <meta name=\"description\" content=\"Marvel information portal\" />\r\n            <title>Marvel information portal</title>\r\n         </Helmet>\r\n         <ErrorBoundary>\r\n            <RandomChar />\r\n         </ErrorBoundary>\r\n         <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n               <CharList onCharSelected={onCharSelected} />\r\n            </ErrorBoundary>\r\n            <div>\r\n               <ErrorBoundary>\r\n                  <CharInfo charId={selectedChar} />\r\n               </ErrorBoundary>\r\n               <ErrorBoundary>\r\n                  <CharSearchForm />\r\n               </ErrorBoundary>\r\n            </div>\r\n         </div>\r\n         <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MainPage\r\n"],"sourceRoot":""}