{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x2","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","comic","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","_useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/6.0a569b8b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img\r\n         src={img}\r\n         style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n         alt=\"Error\"\r\n      />\r\n   )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n   const { loading, error, request, clearError } = useHttp()\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n   const _apiKey = 'apikey=e86591788d711f875b3cf193ec08cc92'\r\n   const _baseOffset = 350\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(_transformCharacter)\r\n   }\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n      return _transformCharacter(res.data.results[0])\r\n   }\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(_transformComics)\r\n   }\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n      return _transformComics(res.data.results[0])\r\n   }\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         description: char.description\r\n            ? `${char.description.slice(0, 210)}...`\r\n            : 'There is no description for this character',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items,\r\n      }\r\n   }\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects[0]?.language || 'en-us',\r\n         price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      }\r\n   }\r\n\r\n   return {\r\n      loading,\r\n      error,\r\n      clearError,\r\n      getAllCharacters,\r\n      getCharacter,\r\n      getAllComics,\r\n      getComic,\r\n   }\r\n}\r\n\r\nexport default useMarvelService\r\n","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n   const [loading, setLoading] = useState(false)\r\n   const [error, setError] = useState(null)\r\n\r\n   const request = useCallback(\r\n      async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n         setLoading(true)\r\n\r\n         try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n               throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false)\r\n            return data\r\n         } catch (error) {\r\n            setLoading(false)\r\n            setError(error.message)\r\n            throw error\r\n         }\r\n      },\r\n      []\r\n   )\r\n\r\n   const clearError = useCallback(() => setError(null), [])\r\n\r\n   return { loading, error, request, clearError }\r\n}\r\n","import { useParams, Link } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\n\nimport ErrorMessage from '../errorMessage/errorMessage'\nimport Spinner from '../spinner/Spinner'\nimport useMarvelService from '../../services/MarvelService'\n\nimport './singleComicPage.scss'\n\nconst SingleComicPage = () => {\n   const { comicId } = useParams()\n   const [comic, setComic] = useState(null)\n   const { loading, error, getComic, clearError } = useMarvelService()\n\n   useEffect(() => {\n      updateComic()\n   }, [comicId])\n\n   const updateComic = () => {\n      clearError()\n      getComic(comicId).then(onComicLoaded)\n   }\n\n   const onComicLoaded = (comic) => {\n      setComic(comic)\n   }\n\n   const errorMessage = error ? <ErrorMessage /> : null\n   const spinner = loading ? <Spinner /> : null\n   const content = !(loading || error || !comic) ? <View comic={comic} /> : null\n\n   return (\n      <>\n         {errorMessage}\n         {spinner}\n         {content}\n      </>\n   )\n}\n\nconst View = ({ comic }) => {\n   const { title, description, pageCount, thumbnail, language, price } = comic\n\n   return (\n      <div className=\"single-comic\">\n         <img src={thumbnail} alt={title} className=\"single-comic__img\" />\n         <div className=\"single-comic__info\">\n            <h2 className=\"single-comic__name\">{title}</h2>\n            <p className=\"single-comic__descr\">{description}</p>\n            <p className=\"single-comic__descr\">{pageCount}</p>\n            <p className=\"single-comic__descr\">Language: {language}</p>\n            <div className=\"single-comic__price\">{price}</div>\n         </div>\n         <Link to=\"/comics\" className=\"single-comic__back\">\n            Back to all\n         </Link>\n      </div>\n   )\n}\n\nexport default SingleComicPage\n"],"sourceRoot":""}